// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —á–∞—Ç–∞
// –ú–æ–¥—É–ª–∏: telegraf Markup
import { Markup } from 'telegraf';

type TaskStatus = '–ù–æ–≤–∞—è' | '–í —Ä–∞–±–æ—Ç–µ' | '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' | '–û—Ç–º–µ–Ω–µ–Ω–∞';

export interface TaskStatusKeyboardOptions {
  kind?: 'task' | 'request';
  allowCancel?: boolean;
}

const statusButtonLabels: Record<
  Exclude<TaskStatus, '–ù–æ–≤–∞—è'>,
  { default: string; active: string }
> = {
  '–í —Ä–∞–±–æ—Ç–µ': { default: '–í —Ä–∞–±–æ—Ç—É', active: 'üü¢ –í —Ä–∞–±–æ—Ç–µ' },
  –í—ã–ø–æ–ª–Ω–µ–Ω–∞: { default: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', active: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' },
  –û—Ç–º–µ–Ω–µ–Ω–∞: { default: '–û—Ç–º–µ–Ω–∏—Ç—å', active: '‚õîÔ∏è –û—Ç–º–µ–Ω–µ–Ω–∞' },
};

const resolveStatusLabel = (
  target: Exclude<TaskStatus, '–ù–æ–≤–∞—è'>,
  currentStatus?: TaskStatus,
): string =>
  currentStatus === target
    ? statusButtonLabels[target].active
    : statusButtonLabels[target].default;

export function taskAcceptConfirmKeyboard(
  id: string,
): ReturnType<typeof Markup.inlineKeyboard> {
  return Markup.inlineKeyboard([
    Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `task_accept_confirm:${id}`),
    Markup.button.callback('–û—Ç–º–µ–Ω–∞', `task_accept_cancel:${id}`),
  ]);
}

export function taskDoneConfirmKeyboard(
  id: string,
): ReturnType<typeof Markup.inlineKeyboard> {
  return Markup.inlineKeyboard([
    Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `task_done_confirm:${id}`),
    Markup.button.callback('–û—Ç–º–µ–Ω–∞', `task_done_cancel:${id}`),
  ]);
}

export function taskCancelConfirmKeyboard(
  id: string,
): ReturnType<typeof Markup.inlineKeyboard> {
  return Markup.inlineKeyboard([
    Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `task_cancel_confirm:${id}`),
    Markup.button.callback('–û—Ç–º–µ–Ω–∞', `task_cancel_cancel:${id}`),
  ]);
}

export default function taskStatusKeyboard(
  id: string,
  currentStatus?: TaskStatus,
  options: TaskStatusKeyboardOptions = {},
): ReturnType<typeof Markup.inlineKeyboard> {
  const buttons = [
    Markup.button.callback(
      resolveStatusLabel('–í —Ä–∞–±–æ—Ç–µ', currentStatus),
      `task_accept_prompt:${id}`,
    ),
    Markup.button.callback(
      resolveStatusLabel('–í—ã–ø–æ–ª–Ω–µ–Ω–∞', currentStatus),
      `task_done_prompt:${id}`,
    ),
  ];
  if (options.allowCancel || options.kind === 'request') {
    buttons.push(
      Markup.button.callback(
        resolveStatusLabel('–û—Ç–º–µ–Ω–µ–Ω–∞', currentStatus),
        `task_cancel_prompt:${id}`,
      ),
    );
  }
  return Markup.inlineKeyboard(buttons);
}

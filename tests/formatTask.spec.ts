/**
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è Telegram.
 * –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: formatTask, mdEscape.
 */
import formatTask from '../apps/api/src/utils/formatTask';
import escapeMarkdownV2 from '../apps/api/src/utils/mdEscape';

describe('formatTask', () => {
  it('—Å–æ–∑–¥–∞—ë—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Markdown —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ —Å–µ–∫—Ü–∏—è–º–∏', () => {
    const task = {
      _id: '507f1f77bcf86cd799439011',
      task_number: 'A-12',
      request_id: 'REQ-42',
      title: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç—Ä—É–±',
      task_type: '–î–æ—Å—Ç–∞–≤–∏—Ç—å',
      start_date: '2024-03-01T06:00:00Z',
      due_date: '2024-03-02T10:30:00Z',
      priority: '–°—Ä–æ—á–Ω–æ',
      status: '–ù–æ–≤–∞—è',
      start_location: '–°–∫–ª–∞–¥ ‚Ññ1',
      start_location_link: 'https://maps.example/start',
      end_location: '–û–±—ä–µ–∫—Ç ¬´–Æ–≥¬ª',
      route_distance_km: 125,
      transport_type: '–ì—Ä—É–∑–æ–≤–æ–π',
      payment_method: '–ë–µ–∑–Ω–∞–ª',
      payment_amount: 1500,
      cargo_length_m: 2.5,
      cargo_width_m: 1.2,
      cargo_height_m: 1,
      cargo_volume_m3: 3.5,
      cargo_weight_kg: 180,
      assignees: [101],
      controllers: [202],
      created_by: 101,
      task_description: '<p>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ –æ–±–µ–¥–∞.</p>',
    };
    const users = {
      101: { name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', username: 'ivan' },
      202: { name: '–û–ª—å–≥–∞ –°–∏–¥–æ—Ä–æ–≤–∞', username: 'olga' },
    };

    const { text } = formatTask(task as any, users);

    const configuredUrl = process.env.APP_URL || 'https://example.com';
    const baseUrl = escapeMarkdownV2(configuredUrl.replace(/\/+$/, ''));
    const expectedLink = `üìå [${escapeMarkdownV2('A-12')}](${baseUrl}/tasks/507f1f77bcf86cd799439011)`;

    expect(text).toContain(expectedLink);
    expect(text).toContain('üßæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*');
    expect(text).toContain('üß≠ *–õ–æ–≥–∏—Å—Ç–∏–∫–∞*');
    expect(text).toContain('üöö *–ì—Ä—É–∑*');
    expect(text).toContain('ü§ù *–£—á–∞—Å—Ç–Ω–∏–∫–∏*');
    expect(text).toContain('[–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤](tg://user?id=101)');
    expect(text).toContain('[–û–ª—å–≥–∞ –°–∏–¥–æ—Ä–æ–≤–∞](tg://user?id=202)');
    expect(text).toMatch(/‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ/);
    expect(text).toContain('üìù *–û–ø–∏—Å–∞–Ω–∏–µ*');
  });

  it('–∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫', () => {
    const task = {
      _id: '507f1f77bcf86cd799439011',
      task_number: 'A-12',
      task_description:
        '<p>–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç.</p><img src="/api/v1/files/demo.png" alt="–°—Ö–µ–º–∞" />',
    };
    const { text, inlineImages } = formatTask(task as any, {});

    const configuredUrl = process.env.APP_URL || 'https://example.com';
    const baseUrl = configuredUrl.replace(/\/+$/, '');
    const expectedUrl = `${baseUrl}/api/v1/files/demo.png`;
    const inlineUrl = `${expectedUrl}?mode=inline`;

    expect(inlineImages).toEqual([{ url: inlineUrl, alt: '–°—Ö–µ–º–∞' }]);
    expect(text).toContain('üìù *–û–ø–∏—Å–∞–Ω–∏–µ*');
    expect(text).toContain(escapeMarkdownV2('–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç.'));
    expect(text).not.toContain('üñº *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*');
    expect(text).not.toContain('<img');
  });

  it('—ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç MarkdownV2 —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ, —Å—Å—ã–ª–∫–∞—Ö –∏ –≤–ª–æ–∂–µ–Ω–∏—è—Ö', () => {
    const textSpecial = '_*[]()~`>#+-=|{}.!\\';
    const altSpecial = '_*[]()~-.!';
    const task = {
      _id: '65f9d82e0f4c446ce93f1fb0',
      task_number: textSpecial,
      title: textSpecial,
      task_description: `<p>${textSpecial}</p><img src="/files/demo.png" alt="${altSpecial}" />`,
    };

    const { text, inlineImages } = formatTask(task as any, {});
    const configuredUrl = process.env.APP_URL || 'https://example.com';
    const baseUrl = configuredUrl.replace(/\/+$/, '');
    const expectedUrl = `${baseUrl}/files/demo.png`;
    const inlineUrl = `${expectedUrl}?mode=inline`;

    expect(text).toContain(`üìå [${escapeMarkdownV2(textSpecial)}](`);
    expect(text).toContain(escapeMarkdownV2(textSpecial));
    expect(text).not.toContain(textSpecial);
    expect(text).not.toContain('üñº *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*');
    expect(inlineImages).toEqual([
      {
        alt: altSpecial,
        url: inlineUrl,
      },
    ]);
  });

  it('—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏', () => {
    const task = {
      _id: '507f1f77bcf86cd799439066',
      task_number: 'SPACE-01',
      task_description: '<p>–ü—Ä–æ–≤–µ—Ä—è–µ–º  –¥–≤–æ–π–Ω–æ–π   –ø—Ä–æ–±–µ–ª</p>',
    };

    const { text } = formatTask(task as any, {});
    const descriptionSection = text.split('üìù *–û–ø–∏—Å–∞–Ω–∏–µ*')[1];

    const expected = `–ü—Ä–æ–≤–µ—Ä—è–µ–º ¬†–¥–≤–æ–π–Ω–æ–π ¬†¬†–ø—Ä–æ–±–µ–ª`;
    expect(descriptionSection).toContain(expected);
  });

  it('–¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –æ —Å—Ä–æ–∫–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏', () => {
    const task = {
      _id: '507f1f77bcf86cd799439099',
      task_number: 'FIN-99',
      title: '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–¥–∞—á–∏ –æ—Ç—á—ë—Ç–∞',
      status: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
      due_date: '2024-04-01T10:00:00Z',
      completed_at: '2024-04-03T12:00:00Z',
    };

    const { text } = formatTask(task as any, {});
    const [headerSection] = text.split('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n');
    const headerLines = headerSection.split('\n');

    expect(headerLines[1]).toBe('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞ 2 –¥–Ω—è 2 —á–∞—Å–∞');
    expect(headerSection).toContain('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞ 2 –¥–Ω—è 2 —á–∞—Å–∞');
  });

  it('–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ HTML –≤ MarkdownV2', () => {
    const task = {
      _id: '507f1f77bcf86cd799439055',
      task_number: 'FMT-01',
      task_description:
        '<p><strong>–í–∞–∂–Ω–æ:</strong> –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É</p><ul><li>–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç</li><li><em>–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å</em> –¥–µ—Ç–∞–ª–∏</li></ul>',
    };

    const { text } = formatTask(task as any, {});
    const descriptionSection = text.split('üìù *–û–ø–∏—Å–∞–Ω–∏–µ*')[1];

    expect(descriptionSection).toContain('*–í–∞–∂–Ω–æ:* –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
    expect(descriptionSection).toContain('‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç');
    expect(descriptionSection).toContain('‚Ä¢ _–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å_ –¥–µ—Ç–∞–ª–∏');
  });
});


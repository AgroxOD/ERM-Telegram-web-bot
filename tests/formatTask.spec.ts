/**
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è Telegram.
 * –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: formatTask.
 */
import formatTask from '../apps/api/src/utils/formatTask';

const escapeMd = (value: string) =>
  value.replace(/[\\_*\[\]()~`>#+\-=|{}.!]/g, '\\$&');

describe('formatTask', () => {
  it('—Å–æ–∑–¥–∞—ë—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Markdown —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ —Å–µ–∫—Ü–∏—è–º–∏', () => {
    const task = {
      _id: '507f1f77bcf86cd799439011',
      task_number: 'A-12',
      request_id: 'REQ-42',
      title: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç—Ä—É–±',
      task_type: '–î–æ—Å—Ç–∞–≤–∏—Ç—å',
      start_date: '2024-03-01T06:00:00Z',
      due_date: '2024-03-02T10:30:00Z',
      priority: '–°—Ä–æ—á–Ω–æ',
      status: '–ù–æ–≤–∞—è',
      start_location: '–°–∫–ª–∞–¥ ‚Ññ1',
      start_location_link: 'https://maps.example/start',
      end_location: '–û–±—ä–µ–∫—Ç ¬´–Æ–≥¬ª',
      route_distance_km: 125,
      transport_type: '–ì—Ä—É–∑–æ–≤–æ–π',
      payment_method: '–ë–µ–∑–Ω–∞–ª',
      payment_amount: 1500,
      cargo_length_m: 2.5,
      cargo_width_m: 1.2,
      cargo_height_m: 1,
      cargo_volume_m3: 3.5,
      cargo_weight_kg: 180,
      assignees: [101],
      controllers: [202],
      created_by: 101,
      task_description: '<p>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ –æ–±–µ–¥–∞.</p>',
    };
    const users = {
      101: { name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', username: 'ivan' },
      202: { name: '–û–ª—å–≥–∞ –°–∏–¥–æ—Ä–æ–≤–∞', username: 'olga' },
    };

    const result = formatTask(task as any, users);

    const configuredUrl = process.env.APP_URL || 'https://example.com';
    const baseUrl = escapeMd(configuredUrl.replace(/\/+$/, ''));
    const expectedLink = `üìå [${escapeMd('A-12')}](${baseUrl}/tasks/507f1f77bcf86cd799439011)`;

    expect(result).toContain(expectedLink);
    expect(result).toContain('üßæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*');
    expect(result).toContain('üß≠ *–õ–æ–≥–∏—Å—Ç–∏–∫–∞*');
    expect(result).toContain('üöö *–ì—Ä—É–∑*');
    expect(result).toContain('ü§ù *–£—á–∞—Å—Ç–Ω–∏–∫–∏*');
    expect(result).toContain('[–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤](tg://user?id=101)');
    expect(result).toContain('[–û–ª—å–≥–∞ –°–∏–¥–æ—Ä–æ–≤–∞](tg://user?id=202)');
    expect(result).toMatch(/‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ/);
    expect(result).toContain('üìù *–û–ø–∏—Å–∞–Ω–∏–µ*');
  });
});

